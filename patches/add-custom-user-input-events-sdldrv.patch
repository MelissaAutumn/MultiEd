diff --git a/SDLDrv/Inc/SDLDrv.h b/SDLDrv/Inc/SDLDrv.h
index 1997a09..289a43a 100755
--- a/SDLDrv/Inc/SDLDrv.h
+++ b/SDLDrv/Inc/SDLDrv.h
@@ -97,6 +97,9 @@ class USDLClient : public UClient, public FNotifyHook
 	INT					NormalMouseInfo[3];
 	INT					CaptureMouseInfo[3];
 
+	// Custom input events to fire off
+	TMap<BYTE, Uint32> InputEvents;
+
     static SDL_Joystick *Joystick;
     static int JoystickAxes;
     static int JoystickButtons;
diff --git a/SDLDrv/Src/SDLClient.cpp b/SDLDrv/Src/SDLClient.cpp
index 4bcdcd4..35776f1 100755
--- a/SDLDrv/Src/SDLClient.cpp
+++ b/SDLDrv/Src/SDLClient.cpp
@@ -246,14 +246,34 @@ void USDLClient::NotifyDestroy( void* Src )
 //
 // Command line.
 //
-UBOOL USDLClient::Exec( const TCHAR* Cmd, FOutputDevice& Ar )
+UBOOL USDLClient::Exec(const TCHAR* Cmd, FOutputDevice& Ar)
 {
 	guard(USDLClient::Exec);
-	if( UClient::Exec( Cmd, Ar ) )
-	{
-		return 1;
-	}
-	return 0;
+		if (ParseCommand(&Cmd, TEXT("REGISTER_INPUTEVENT")))
+		{
+			INT Key = IK_None;
+			Parse(Cmd,TEXT("KEY="), Key);
+
+			if (Key != IK_None)
+			{
+				auto eventId = SDL_RegisterEvents(1);
+				if (eventId == -1)
+				{
+					return 0;
+				}
+
+				Ar.Log(EName::NAME_Int, FString::Printf(TEXT("%u"), eventId));
+
+				InputEvents.Set(Key, eventId);
+
+				return 1;
+			}
+		}
+		else if (UClient::Exec(Cmd, Ar))
+		{
+			return 1;
+		}
+		return 0;
 	unguard;
 }
 
@@ -271,7 +291,9 @@ void USDLClient::Tick()
         // Pump events here!
         char      *sdl_error;
         SDL_Event Event;
-        while (SDL_PollEvent(&Event)) {
+    	SDL_PumpEvents();
+    	// Don't retrieve user events!
+    	while(SDL_PeepEvents(&Event, 1, SDL_GETEVENT, SDL_FIRSTEVENT, SDL_USEREVENT-1)) {
             uint32_t nWinID = 0;
 
             // Fill-up the queue!
diff --git a/SDLDrv/Src/SDLViewport.cpp b/SDLDrv/Src/SDLViewport.cpp
index 793068a..e6ae126 100755
--- a/SDLDrv/Src/SDLViewport.cpp
+++ b/SDLDrv/Src/SDLViewport.cpp
@@ -963,6 +963,21 @@ void* USDLViewport::GetWindow()
 UBOOL USDLViewport::CauseInputEvent( INT iKey, EInputAction Action, FLOAT Delta )
 {
 	guard(USDLViewport::CauseInputEvent);
+
+	// If we have an event for this key, ship it off!
+	const auto eventId = GetOuterUSDLClient()->InputEvents.Find(iKey);
+	if (eventId)
+	{
+		SDL_Event event;
+		SDL_memset(&event, 0, sizeof(event)); /* or SDL_zero(event) */
+		event.type = *eventId;
+		event.user.timestamp = SDL_GetTicks();
+		event.user.windowID = SDL_GetWindowID(this->Window);
+		event.user.code = iKey;
+		event.user.data1 = reinterpret_cast<void*>(Action);
+		SDL_PushEvent(&event);
+	}
+
 	return GetOuterUSDLClient()->Engine->InputEvent( this, (EInputKey)iKey, Action, Delta );
 	unguard;
 }
