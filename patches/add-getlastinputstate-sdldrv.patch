diff --git a/SDLDrv/Inc/SDLDrv.h b/SDLDrv/Inc/SDLDrv.h
index 1997a09..a91063f 100755
--- a/SDLDrv/Inc/SDLDrv.h
+++ b/SDLDrv/Inc/SDLDrv.h
@@ -46,6 +46,7 @@ extern "C" {
 
 #include <SDL2/SDL.h>
 #include <vector>
+#include <map>
 
 // Unreal includes.
 #include "Engine.h"
@@ -162,6 +163,7 @@ class USDLViewport : public UViewport
 
 	// SDL Keysym to EInputKey map.
 	TMap<SDL_Keycode,BYTE> KeysymMap;
+	std::map<BYTE, EInputAction> LastInputActions;
 
 	// Joystick Hat Hack
 	EInputKey 			LastJoyHat;
@@ -222,6 +224,19 @@ class USDLViewport : public UViewport
 	void UpdateSpeech();  // call once a frame from UpdateInput().
 
     void UpdatePerWindowInput( const PerWindowEvent& Queue );
+
+	/**
+	 * Provides the last input state for a given IIK_* key via *Action.
+	 * This is tracked separately from any inputs so its guarenteed
+	 * to be available until you call it with Clear=true.
+	 * Mainly used for the editor. Probably could be done faster/cleaner,
+	 * this more of a prototype to get right click actions from the game to MultiEd.
+	 *
+	 * @param Key IIK_* input enum values
+	 * @param Action Action pointer to be filled in from the requested Key
+	 * @param Clear Clears the last mouse state, you usually want to do this.
+	 */
+	void GetLastInputState( INT Key, EInputAction* Action, UBOOL Clear );
 };
 
 
diff --git a/SDLDrv/Src/SDLViewport.cpp b/SDLDrv/Src/SDLViewport.cpp
index 85562bf..a61ba70 100755
--- a/SDLDrv/Src/SDLViewport.cpp
+++ b/SDLDrv/Src/SDLViewport.cpp
@@ -904,6 +904,11 @@ void* USDLViewport::GetWindow()
 UBOOL USDLViewport::CauseInputEvent( INT iKey, EInputAction Action, FLOAT Delta )
 {
 	guard(USDLViewport::CauseInputEvent);
+
+	if (Action > IST_None) {
+		LastInputActions.insert({iKey, Action});
+	}
+
 	return GetOuterUSDLClient()->Engine->InputEvent( this, (EInputKey)iKey, Action, Delta );
 	unguard;
 }
@@ -1699,6 +1704,18 @@ void USDLViewport::UpdateSpeech()
     #endif
 }
 
+void USDLViewport::GetLastInputState(INT Key, EInputAction *Action, UBOOL Clear) {
+	auto found = LastInputActions.find(Key);
+
+	if (found != LastInputActions.end()) {
+		*Action = found->second;
+	}
+
+	if (Action && Clear) {
+		LastInputActions.erase(Key);
+	}
+}
+
 
 void USDLViewport::TextToSpeech( const FString& Text, FLOAT Volume )
 {
